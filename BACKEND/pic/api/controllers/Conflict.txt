function actualizarPreguntaIII(req, res) {
    try {
      var actu = async (req, res) => {
        var dec = tools.decryptJson(req.body.data);
        cuestionarioHandler.findOne(
          { email: dec.data.email },
          (err, cuestionarioBuscado) => {
            if (err) {
              return res.status(640).send({
                estado: "error",
                message: "error",
                data: Object.assign(err),
              });
            }
            if (!cuestionarioBuscado) {
              return res.status(200).send({
                estado: "cuestionario no encontrado",
                message: util.format("cuestionario no encontrado"),
                data: Object.assign({}),
              });
            }
            cuestionarioBuscado.listado_preguntas_seccion_iii.forEach(
              (preguntaBuscada) => {
                if (preguntaBuscada.id_pregunta == dec.data.id_pregunta) {
                  preguntaBuscada.valor_respuesta = dec.data.valor_respuesta;
                  preguntaBuscada.estado_preguntas = dec.data.estado_respuesta;
                }
              }
            );
            cuestionarioHandler
              .updateOne({ email: dec.data.email }, cuestionarioBuscado)
              .then(() => {
                return res.status(200).send({
                  estado: "PreguntaIII Actualizada",
                  message: util.format("PreguntaIII Actualizada"),
                  data: Object.assign(cuestionarioBuscado),
                });
              });
          }
        );
      };
      actu(req, res);
    } catch (error) {}
  }
  
  function buscarCuestionarioCorreo(req, res) {
    try {
      var buscar = async (req, res) => {
        var dec = tools.decryptJson(req.body.data);
  
        cuestionarioHandler.findOne(
          { email: dec.email },
          (err, cuestionarioBuscado) => {
            if (err) {
              return res.status(640).send({
                estado: "error",
                message: "error",
                data: Object.assign(err),
              });
            }
            if (!cuestionarioBuscado) {
              return res.status(200).send({
                estado: "Validación de cuestionario realizada",
                message: util.format(
                  "No existe el cuestionario, iniciando nuevo cuestionario"
                ),
                data: Object.assign({}),
              });
            }
            var listado_competencias = [];
            var listado_preguntas = [];
            var listado_preguntas_seccion_iii = [];
  
            cuestionarioBuscado.listado_competencias.forEach((competencia) => {
              if (competencia.estado_respuesta == "No respondida") {
                listado_competencias.push(competencia);
              }
            });
  
            cuestionarioBuscado.listado_preguntas.forEach((pregunta) => {
              if (pregunta.estado_respuesta == "No respondida") {
                listado_preguntas.push(pregunta);
              }
            });
  
            cuestionarioBuscado.listado_preguntas_seccion_iii.forEach(
              (pregunta) => {
                if (pregunta.estado_preguntas == "No respondida") {
                  listado_preguntas_seccion_iii.push(pregunta);
                }
              }
            );
  
            cuestionarioBuscado.listado_competencias = listado_competencias;
            cuestionarioBuscado.listado_preguntas = listado_preguntas;
            cuestionarioBuscado.listado_preguntas_seccion_iii = listado_preguntas_seccion_iii;
            return res.status(200).send({
              estado: "Validación de cuestionario realizada",
              message: util.format(
                "Podrás continuar el cuestionario desde donde lo dejaste"
              ),
              data: Object.assign(cuestionarioBuscado),
            });
          }
        );
      };
      buscar(req, res);
    } catch (error) {
      throw boom.boomify(err);
    }
  }
  
  function actualizarEstadoCuestionario(req, res) {
    try {
      var actualizando = async (req, res) => {
        var dec = tools.decryptJson(req.body.data);
        var respondido = true;
        cuestionarioHandler.findOne(
          { email: dec.data.email },
          (err, cuestionarioBuscado) => {
            if (err) {
              return res.status(640).send({
                estado: "error",
                message: "error",
                data: Object.assign(err),
              });
            }
            if (!cuestionarioBuscado) {
              return res.status(601).send({
                estado: "No existe el cuestionario",
                message: util.format("no existe el cuestionario"),
              });
            }
  
            if (respondido) {
              cuestionarioBuscado.listado_competencias.forEach((element) => {
                if (element.estado_respuesta != "Respondida") {
                  respondido = false;
                  break;
                }
              });
            }
            if (respondido) {
              cuestionarioBuscado.listado_preguntas.forEach((element) => {
                if (element.estado_respuesta != "Respondida") {
                  respondido = false;
                  break;
                }
              });
            }
            if (respondido) {
              cuestionarioBuscado.listado_preguntas_seccion_iii.forEach(
                (element) => {
                  if (element.estado_respuesta != "Respondida") {
                    respondido = false;
                    break;
                  }
                }
              );
            }
  
            if (respondido) {
              cuestionarioBuscado.estado_cuestionario = "Respondido";
              cuestionarioHandler
                .updateOne({ email: dec.data.email }, cuestionarioBuscado)
                .then(() => {
                  return res.status(200).send({
                    estado: "Exito",
                    message: util.format("cuestionario actualizado"),
                    data: Object.assign(cuestionarioBuscado),
                  });
                });
            } else {
              return res.status(200).send({
                estado: "no se actualizo cuestionario",
                message: util.format("no se han respondido todos los campos"),
                data: Object.assign(cuestionarioBuscado),
              });
            }
          }
        );
      };
      actualizando(req, res);
    } catch (error) {
      throw boom.boomify(err);
    }
  }
  
  function actualizarPregunta(req, res) {
    try {
      var actualizando = async (req, res) => {
        var dec = tools.decryptJson(req.body.data);
  
        cuestionarioHandler.findOne(
          { email: dec.data.email },
          (err, cuestionarioBuscado) => {
            if (err) {
              return res.status(601).send({
                estado: "No existe el cuestionario",
                message: util.format("no existe el cuestionario"),
                data: Object.assign(err),
              });
            }
            if (!cuestionarioBuscado) {
              return res.status(601).send({
                estado: "No existe el cuestionario",
                message: util.format("no existe el cuestionario"),
                data: Object.assign({}),
              });
            }
            cuestionarioBuscado.listado_preguntas.forEach((element) => {
              if (element.id_pregunta == dec.data.id_pregunta) {
                element.valor_respuesta = dec.data.valor_respuesta;
                element.estado_respuesta = dec.data.estado_respuesta;
              }
            });
            cuestionarioHandler
              .updateOne({ email: dec.data.email }, cuestionarioBuscado)
              .then(() => {
                return res.status(200).send({
                  estado: "Exito",
                  message: util.format("cuestionario actualizado"),
                  data: Object.assign(cuestionarioBuscado),
                });
              });
          }
        );
      };
      actualizando(req, res);
    } catch (error) {
      throw boom.boomify(err);
    }
  }
  
  function actualizarCompetencia(req, res) {
    try {
      var actualizando = async (req, res) => {
        var dec = tools.decryptJson(req.body.data);
  
        cuestionarioHandler.findOne(
          { email: dec.data.email },
          (err, cuestionarioBuscado) => {
            if (err) {
              return res.status(601).send({
                estado: "No existe el cuestionario",
                message: util.format("no existe el cuestionario"),
                data: Object.assign(err),
              });
            }
            if (!cuestionarioBuscado) {
              return res.status(601).send({
                estado: "No existe el cuestionario",
                message: util.format("no existe el cuestionario"),
                data: Object.assign({}),
              });
            }
  
            cuestionarioBuscado.listado_competencias.forEach((element) => {
              if (element.nombreCompetencia == dec.data.competencia) {
                element.valor_respuesta = dec.data.valor_respuesta;
                element.estado_respuesta = dec.data.estado_respuesta;
              }
            });
            cuestionarioHandler
              .updateOne({ email: dec.data.email }, cuestionarioBuscado)
              .then(() => {
                return res.status(200).send({
                  estado: "Exito",
                  message: util.format("Cuestionario Actualizado"),
                  data: Object.assign(cuestionarioBuscado),
                });
              });
          }
        );
      };
      actualizando(req, res);
    } catch (error) {
      throw boom.boomify(err);
    }
  }